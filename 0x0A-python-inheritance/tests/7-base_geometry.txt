The ``1-my_list`` module
============================

Using ``1-mylist``
--------------------

Import function from module:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test for class:

	>>> new = BaseGeometry()
	>>> type(new) == BaseGeometry
	True

Test for method:

	>>> type(BaseGeometry.__dict__['area'])
	<class 'function'>

test for area method:

	>>> new.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

test for area with 1 argument:

	>>> new.area(2)
	Traceback (most recent call last):
	...
	TypeError: area() takes 1 positional argument but 2 were given

test for integer_validator method:

	>>> type(BaseGeometry.__dict__['integer_validator'])
	<class 'function'>

test for integer_validator with no argument:

	>>> new.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

test for integer_validator with 1 argument:

	>>> new.integer_validator(2)
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

test for integer_validator with 3 arguments:

	>>> new.integer_validator(2, 3, 5)
	Traceback (most recent call last):
	...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given

test for integer_validator with 2 arguments:

	>>> new.integer_validator("number", 3)

test with value which is not int:

	>>> new.integer_validator("number", "3")
	Traceback (most recent call last):
	...
	TypeError: number must be an integer

test with value which is 0:

	>>> new.integer_validator("number", 0)
	Traceback (most recent call last):
	...
	ValueError: number must be greater than 0

test with value which is negative integer:

	>>> new.integer_validator("number", -1)
	Traceback (most recent call last):
	...
	ValueError: number must be greater than 0

test with value which is tuple:

	>>> new.integer_validator("number", (-1,))
	Traceback (most recent call last):
	...
	TypeError: number must be an integer

test with a value which is a list:

	>>> new.integer_validator("number", [])
	Traceback (most recent call last):
	...
	TypeError: number must be an integer

test with a value which is a dict:

	>>> new.integer_validator("number", {"num": 3})
	Traceback (most recent call last):
	...
	TypeError: number must be an integer

test with a value which is a boolien:

	>>> new.integer_validator("number", True)
	Traceback (most recent call last):
	...
	TypeError: number must be an integer

test with a value which is a none:

	>>> new.integer_validator("number", None)
	Traceback (most recent call last):
	...
	TypeError: number must be an integer
